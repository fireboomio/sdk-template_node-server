{{#each operations~}}
    {{#if (isNotEmpty inputSchema)}}
        {{#if hasInput}}
export interface Internal{{name}}Input {
            {{#each inputSchema.properties as |schema key|}}
   {{> schema_partial data=schema.properties key=key isRequired=(stringInArray key inputSchema.required)}}
            {{/each}}
}
        {{/if~}}
        {{#each inputSchema.definitions as |schema name|}}
export interface {{name}} {
            {{#each schema.properties as |schema key|}}
   {{> schema_partial data=schema.properties key=key isRequired=(stringInArray key inputSchema.required)}}
            {{/each}}
}
        {{/each}}
    {{/if~}}
    {{#if (isNotEmpty injectedSchema)}}
        {{#if hasInjectedInput}}
export interface Injected{{name}}Input {
        {{#each injectedSchema.properties as |schema key|}}
   {{> schema_partial data=schema.properties key=key isRequired=(stringInArray key injectedSchema.required)}}
        {{/each}}
}
        {{/if~}}
    {{/if}}
    {{#if (isNotEmpty outputSchema)}}
export interface {{name}}Response {
    data?: {{name}}Response
    errors?: ReadonlyArray<GraphQLError>;
}
        {{#with outputSchema.properties.data}}
export interface {{name}}ResponseData {
            {{#each properties as |schema key|}}
    {{> schema_partial data=schema.properties key=key isRequired=(stringInArray key required)}}
            {{/each}}
}
        {{/with}}
    {{/if~}}
{{/each}}

export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;

export type JSONObject = { [key: string]: JSONValue };

export interface GraphQLError {
    message: string;
    path?: ReadonlyArray<string | number>;
}