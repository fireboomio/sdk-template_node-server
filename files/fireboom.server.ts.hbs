import { GraphQLObjectType, GraphQLSchema, GraphQLString } from 'graphql';
import { configureWunderGraphServer, type AuthenticationResponse } from 'fireboom-wundersdk/server';
import type { HooksConfig } from './generated/fireboom.hooks';
import type { InternalClient } from './generated/fireboom.internal.client';

{{#each hooksConfig as |hookConf hookType|}}
    {{#equalAny hookType "Global"}}
        {{#each hookConf.httpTransport as |hook hookName|}}
            {{#if hook.enableForAllOperations}}
import global_{{hookName}} from '{{hook.tsPath}}';
            {{/if}}
        {{/each}}
    {{/equalAny}}
    {{#equalAny hookType "Authentication"}}
        {{#each hookConf.tsPathMap as |tsPath hookName|}}
import {{hookName}} from '{{tsPath}}';
        {{/each}}
    {{/equalAny}}
    {{#equalAny hookType "Queries,Mutations"}}
        {{#each hookConf as |operationConf operationName|}}
            {{#each operationConf.tsPathMap as |tsPath hookName|}}
import {{replaceSpecial operationName "$"}}_{{hookName}} from '{{tsPath}}';
            {{/each}}
        {{/each}}
    {{/equalAny}}
{{/each}}
{{#each dataSources}}
    {{#if isCustomized}}
import {{apiNameSpace}} from './customize/{{apiNameSpace}}';
    {{/if}}
{{/each}}

export default configureWunderGraphServer<HooksConfig, InternalClient, {}>(() => ({
    hooks: {
{{#each hooksConfig as |hookConf hookType|}}
        {{lowerFirst hookType}}: {
    {{#equalAny hookType "Global"}}
            httpTransport: {
        {{#each hookConf.httpTransport as |hook hookName|}}
            {{#if hook.enableForAllOperations}}
                {{hookName}}: {
                    hook: global_{{hookName}},
                },
            {{/if}}
        {{/each}}
            }
    {{/equalAny}}
    {{#equalAny hookType "Authentication"}}
        {{#each hookConf.tsPathMap as |tsPath hookName|}}
            {{hookName}},
        {{/each}}
    {{/equalAny}}
    {{#equalAny hookType "Queries,Mutations"}}
        {{#each hookConf as |operationConf operationName|}}
            {{#each operationConf.tsPathMap as |tsPath hookName|}}
            {{replaceSpecial operationName "$"}}: {
                {{hookName}}: {{replaceSpecial operationName "$"}}_{{hookName}},
            },
            {{/each}}
        {{/each}}
    {{/equalAny}}
        },
{{/each}}
    },
    graphqlServers: [
{{#each dataSources}}
    {{#if isCustomized}}
        {
            apiNamespace: "{{apiNameSpace}}",
            serverName: "{{apiNameSpace}}",
            enableGraphQLEndpoint: true,
            schema: {{apiNameSpace}}
        },
    {{/if}}
{{/each}}
    ]
}));
